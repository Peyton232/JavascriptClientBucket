/**
 * TodoBudget
 * API for Todo Budget app
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Achievement from '../model/Achievement';
import Alert from '../model/Alert';
import Bucket from '../model/Bucket';
import Error from '../model/Error';
import Transaction from '../model/Transaction';
import User from '../model/User';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addAchievements operation.
     * @callback module:api/DefaultApi~addAchievementsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Achievement} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * add new Achievements
     * post new Achievements
     * @param {Number} id ID of user
     * @param {module:model/Achievement} achievement Achievements to add to the user
     * @param {module:api/DefaultApi~addAchievementsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Achievement}
     */
    addAchievements(id, achievement, callback) {
      let postBody = achievement;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addAchievements");
      }
      // verify the required parameter 'achievement' is set
      if (achievement === undefined || achievement === null) {
        throw new Error("Missing the required parameter 'achievement' when calling addAchievements");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Achievement;
      return this.apiClient.callApi(
        '/users/{id}/Achievements/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addAlert operation.
     * @callback module:api/DefaultApi~addAlertCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Alert} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * insert new alert
     * insert new alert
     * @param {Number} id ID of user
     * @param {module:model/Alert} alert Alert to add to the user
     * @param {module:api/DefaultApi~addAlertCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Alert}
     */
    addAlert(id, alert, callback) {
      let postBody = alert;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addAlert");
      }
      // verify the required parameter 'alert' is set
      if (alert === undefined || alert === null) {
        throw new Error("Missing the required parameter 'alert' when calling addAlert");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Alert;
      return this.apiClient.callApi(
        '/users/{id}/alerts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addBucket operation.
     * @callback module:api/DefaultApi~addBucketCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Bucket} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new Bucket
     * Creates a new bucket for a user
     * @param {Number} id user id
     * @param {module:model/Bucket} bucket bucket to add to the store
     * @param {module:api/DefaultApi~addBucketCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Bucket}
     */
    addBucket(id, bucket, callback) {
      let postBody = bucket;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addBucket");
      }
      // verify the required parameter 'bucket' is set
      if (bucket === undefined || bucket === null) {
        throw new Error("Missing the required parameter 'bucket' when calling addBucket");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Bucket;
      return this.apiClient.callApi(
        '/users/{id}/buckets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addUser operation.
     * @callback module:api/DefaultApi~addUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new User
     * Creates a new user in the datbase. Duplicates are allowed
     * @param {module:model/User} user user to add to the store
     * @param {module:api/DefaultApi~addUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    addUser(user, callback) {
      let postBody = user;
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling addUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deeleteTransaction operation.
     * @callback module:api/DefaultApi~deeleteTransactionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Transaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete a transaction
     * delete a transaction
     * @param {Number} id ID of user
     * @param {String} name name of bucket
     * @param {String} timestamp timestamp of transaction
     * @param {module:api/DefaultApi~deeleteTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Transaction}
     */
    deeleteTransaction(id, name, timestamp, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deeleteTransaction");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling deeleteTransaction");
      }
      // verify the required parameter 'timestamp' is set
      if (timestamp === undefined || timestamp === null) {
        throw new Error("Missing the required parameter 'timestamp' when calling deeleteTransaction");
      }

      let pathParams = {
        'id': id,
        'name': name,
        'timestamp': timestamp
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Transaction;
      return this.apiClient.callApi(
        '/users/{id}/buckets/{name}/transactions/{timestamp}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAchievement operation.
     * @callback module:api/DefaultApi~deleteAchievementCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Achievement} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete an Achievement by name
     * delete an Achievement
     * @param {Number} id ID of user
     * @param {String} name name of Achievement
     * @param {module:api/DefaultApi~deleteAchievementCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Achievement}
     */
    deleteAchievement(id, name, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteAchievement");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling deleteAchievement");
      }

      let pathParams = {
        'id': id,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Achievement;
      return this.apiClient.callApi(
        '/users/{id}/Achievements/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAlert operation.
     * @callback module:api/DefaultApi~deleteAlertCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Alert} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete an Achievement by name
     * delete an Achievement
     * @param {Number} id ID of user
     * @param {String} name name of alert
     * @param {module:api/DefaultApi~deleteAlertCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Alert}
     */
    deleteAlert(id, name, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteAlert");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling deleteAlert");
      }

      let pathParams = {
        'id': id,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Alert;
      return this.apiClient.callApi(
        '/users/{id}/alerts/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBucket operation.
     * @callback module:api/DefaultApi~deleteBucketCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a bucket by name
     * deletes a single bucket based on the name supplied
     * @param {Number} id ID of user to delete
     * @param {String} name name of bucket to fetch
     * @param {module:api/DefaultApi~deleteBucketCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteBucket(id, name, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteBucket");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling deleteBucket");
      }

      let pathParams = {
        'id': id,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/{id}/buckets/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUser operation.
     * @callback module:api/DefaultApi~deleteUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a user by ID
     * deletes a single user based on the ID supplied
     * @param {Number} id ID of user to delete
     * @param {module:api/DefaultApi~deleteUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteUser(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteUser");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findBucketByName operation.
     * @callback module:api/DefaultApi~findBucketByNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Bucket} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a bucket by name
     * Returns a bucket based on a name
     * @param {Number} id user id
     * @param {String} name name of bucket to fetch
     * @param {module:api/DefaultApi~findBucketByNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Bucket}
     */
    findBucketByName(id, name, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling findBucketByName");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling findBucketByName");
      }

      let pathParams = {
        'id': id,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Bucket;
      return this.apiClient.callApi(
        '/users/{id}/buckets/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findBuckets operation.
     * @callback module:api/DefaultApi~findBucketsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Bucket>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns all of this users buckets
     * Returns all buckets from a specific user
     * @param {Number} id user id
     * @param {module:api/DefaultApi~findBucketsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Bucket>}
     */
    findBuckets(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling findBuckets");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Bucket];
      return this.apiClient.callApi(
        '/users/{id}/buckets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findUserByID operation.
     * @callback module:api/DefaultApi~findUserByIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a user by ID
     * Returns a user based on a single ID
     * @param {Number} id ID of user to fetch
     * @param {module:api/DefaultApi~findUserByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    findUserByID(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling findUserByID");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/users/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findUsers operation.
     * @callback module:api/DefaultApi~findUsersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/User>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns all users
     * Returns all users from the system that the user has access to
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit maximum number of results to return
     * @param {module:api/DefaultApi~findUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/User>}
     */
    findUsers(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [User];
      return this.apiClient.callApi(
        '/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAchievement operation.
     * @callback module:api/DefaultApi~getAchievementCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Achievement} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get an Achievement by name
     * get an Achievement
     * @param {Number} id ID of user
     * @param {String} name name of Achievement
     * @param {module:api/DefaultApi~getAchievementCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Achievement}
     */
    getAchievement(id, name, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAchievement");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getAchievement");
      }

      let pathParams = {
        'id': id,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Achievement;
      return this.apiClient.callApi(
        '/users/{id}/Achievements/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAchievements operation.
     * @callback module:api/DefaultApi~getAchievementsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get all Achievements
     * get all Achievements
     * @param {Number} id ID of user
     * @param {module:api/DefaultApi~getAchievementsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getAchievements(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAchievements");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/{id}/Achievements/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAlert operation.
     * @callback module:api/DefaultApi~getAlertCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Alert} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete an alert by name
     * delete an alert
     * @param {Number} id ID of user
     * @param {String} name name of alert
     * @param {module:api/DefaultApi~getAlertCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Alert}
     */
    getAlert(id, name, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAlert");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getAlert");
      }

      let pathParams = {
        'id': id,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Alert;
      return this.apiClient.callApi(
        '/users/{id}/alerts/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAlerts operation.
     * @callback module:api/DefaultApi~getAlertsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get alerts
     * show alerts
     * @param {Number} id ID of user
     * @param {module:api/DefaultApi~getAlertsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getAlerts(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAlerts");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/{id}/alerts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTransaction operation.
     * @callback module:api/DefaultApi~getTransactionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Transaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get a transaction by timestamp
     * get a transaction by timestamp
     * @param {Number} id ID of user
     * @param {String} name name of bucket
     * @param {String} timestamp timestamp of transaction
     * @param {module:api/DefaultApi~getTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Transaction}
     */
    getTransaction(id, name, timestamp, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTransaction");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getTransaction");
      }
      // verify the required parameter 'timestamp' is set
      if (timestamp === undefined || timestamp === null) {
        throw new Error("Missing the required parameter 'timestamp' when calling getTransaction");
      }

      let pathParams = {
        'id': id,
        'name': name,
        'timestamp': timestamp
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Transaction;
      return this.apiClient.callApi(
        '/users/{id}/buckets/{name}/transactions/{timestamp}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTransactions operation.
     * @callback module:api/DefaultApi~getTransactionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get transactions
     * get transactions
     * @param {Number} id ID of user
     * @param {String} name name of bucket
     * @param {module:api/DefaultApi~getTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getTransactions(id, name, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTransactions");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getTransactions");
      }

      let pathParams = {
        'id': id,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/{id}/buckets/{name}/transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the insertTransaction operation.
     * @callback module:api/DefaultApi~insertTransactionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Transaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Inserts a new transaction
     * insert new transaction
     * @param {Number} id ID of user
     * @param {String} name name of bucket
     * @param {module:model/Transaction} transaction transaction to add to the user
     * @param {module:api/DefaultApi~insertTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Transaction}
     */
    insertTransaction(id, name, transaction, callback) {
      let postBody = transaction;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling insertTransaction");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling insertTransaction");
      }
      // verify the required parameter 'transaction' is set
      if (transaction === undefined || transaction === null) {
        throw new Error("Missing the required parameter 'transaction' when calling insertTransaction");
      }

      let pathParams = {
        'id': id,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Transaction;
      return this.apiClient.callApi(
        '/users/{id}/buckets/{name}/transactions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAchievements operation.
     * @callback module:api/DefaultApi~updateAchievementsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Achievement} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * update Achievement
     * update an Achievement
     * @param {Number} id ID of user
     * @param {module:model/Achievement} achievement Achievements to update on the user
     * @param {module:api/DefaultApi~updateAchievementsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Achievement}
     */
    updateAchievements(id, achievement, callback) {
      let postBody = achievement;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateAchievements");
      }
      // verify the required parameter 'achievement' is set
      if (achievement === undefined || achievement === null) {
        throw new Error("Missing the required parameter 'achievement' when calling updateAchievements");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Achievement;
      return this.apiClient.callApi(
        '/users/{id}/Achievements/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAlert operation.
     * @callback module:api/DefaultApi~updateAlertCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Alert} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * update an alert
     * update an alert
     * @param {Number} id ID of user
     * @param {module:model/Alert} alert Alert to update on the user
     * @param {module:api/DefaultApi~updateAlertCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Alert}
     */
    updateAlert(id, alert, callback) {
      let postBody = alert;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateAlert");
      }
      // verify the required parameter 'alert' is set
      if (alert === undefined || alert === null) {
        throw new Error("Missing the required parameter 'alert' when calling updateAlert");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Alert;
      return this.apiClient.callApi(
        '/users/{id}/alerts', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBucket operation.
     * @callback module:api/DefaultApi~updateBucketCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Bucket} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing bucket
     * Find a user and update their data
     * @param {Number} id user id
     * @param {module:model/Bucket} bucket Bucket to update
     * @param {module:api/DefaultApi~updateBucketCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Bucket}
     */
    updateBucket(id, bucket, callback) {
      let postBody = bucket;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateBucket");
      }
      // verify the required parameter 'bucket' is set
      if (bucket === undefined || bucket === null) {
        throw new Error("Missing the required parameter 'bucket' when calling updateBucket");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Bucket;
      return this.apiClient.callApi(
        '/users/{id}/buckets', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTransaction operation.
     * @callback module:api/DefaultApi~updateTransactionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Transaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * update a transaction
     * update a transaction
     * @param {Number} id ID of user
     * @param {String} name name of bucket
     * @param {module:api/DefaultApi~updateTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Transaction}
     */
    updateTransaction(id, name, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateTransaction");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling updateTransaction");
      }

      let pathParams = {
        'id': id,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Transaction;
      return this.apiClient.callApi(
        '/users/{id}/buckets/{name}/transactions', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUser operation.
     * @callback module:api/DefaultApi~updateUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing user
     * Find a user and update their data
     * @param {module:model/User} user User to update
     * @param {module:api/DefaultApi~updateUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    updateUser(user, callback) {
      let postBody = user;
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling updateUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/users', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
